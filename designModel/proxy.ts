/**
 * 代理模式： 为其他对象提供一种代理以控制这个对象的访问
 * 但是代理模式会增加微弱的开销。另外代理对象过多也会导致调试的困难。
 * 因为代理层的存在，我们往往可能忽略这一层带来的影响，导致忘记这个对象其实是一个代理
 * 如果你没有采用 new Proxy 这种 API 创建代理，而是采用继承的方式实现，你会一下子继承这个类的所有方法，而做不到按需控制访问权限的灵活效果，所以代理比继承更加灵活。
 * JS 的 new Proxy 对应了 Java 动态代理模式，一般认为动态代理比静态代理更强大。
 * 最后，还要重申那句话，代理模式理解与运用并不难，难就难在能否在恰当的场合想到它，双向绑定几乎是代理模式最好的例子。
 */

 const proxy = new Proxy( obj,{
     
     get(target,ke){}

     set(target,key,value) {}
 })